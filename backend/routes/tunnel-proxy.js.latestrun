const express = require('express');
const supabase = require('../config/database');

const router = express.Router();

router.use('*', async (req, res, next) => {
  const startTime = Date.now();
  console.log(`üîÑ [${new Date().toISOString()}] Tunnel proxy request: ${req.method} ${req.url}`);

  try {
    const subdomain = req.headers['x-tunnel-subdomain'];
    const region = req.headers['x-tunnel-region'];

    if (!subdomain || !region) {
      console.log('‚ùå Missing required headers');
      return res.status(400).json({
        message: 'Invalid tunnel request',
        error: 'Missing subdomain or region headers',
        received_headers: { subdomain, region }
      });
    }

    console.log(`üîç Headers: subdomain=${subdomain}, region=${region}`);

    const { data: tunnels, error } = await supabase
      .from('tunnels')
      .select(`*, users!tunnels_user_id_fkey(email, name)`)
      .eq('subdomain', subdomain)
      .eq('location', region)
      .eq('status', 'active')
      .limit(1);

    if (error) {
      console.error('‚ùå Database error:', error);
      return res.status(500).json({
        message: 'Database error',
        error: error.message
      });
    }

    if (!tunnels || tunnels.length === 0) {
      console.log(`‚ùå Tunnel not found: ${subdomain}.${region}`);
      return res.status(404).json({
        message: 'Tunnel not found',
        subdomain,
        region,
        help: 'Make sure your tunnel is active and client is connected'
      });
    }

    const tunnel = tunnels[0];
    console.log(`‚úÖ Tunnel found: ${tunnel.id} (client_connected: ${tunnel.client_connected})`);

    if (!tunnel.client_connected) {
      console.log(`‚ùå Client not connected for tunnel: ${subdomain}.${region}`);
      return res.status(503).json({
        message: 'Tunnel client not connected',
        subdomain,
        region,
        help: 'Start your tunnel client with the connection token',
        tunnel_url: `https://${subdomain}.${region}.tunlify.biz.id`,
        status: 'client_disconnected',
        instructions: {
          download: 'https://github.com/tunlify/client/releases/latest',
          command: `./tunlify-client -token=${tunnel.connection_token} -local=127.0.0.1:3000`
        }
      });
    }

    const { activeTunnels, forwardRequest } = req.app.locals;
    const tunnelKey = `${subdomain}.${region}`;

    console.log(`üîç forwardRequest() called for tunnelKey: ${tunnelKey}`);
    console.log(`üîç Available tunnels:`, Array.from(activeTunnels?.keys() || []));

    if (!activeTunnels || !activeTunnels.has(tunnelKey)) {
      console.log(`‚ùå WebSocket connection not found for: ${tunnelKey}`);
      return res.status(503).json({
        message: 'Tunnel client WebSocket not connected',
        subdomain,
        region,
        tunnel_id: tunnel.id,
        status: 'websocket_disconnected',
        help: 'Client needs to establish WebSocket connection',
        websocket_url: `wss://api.tunlify.biz.id/ws/tunnel?token=${tunnel.connection_token}`,
        instructions: {
          step1: 'Download latest client',
          step2: 'Run: ./tunlify-client -token=YOUR_TOKEN -local=127.0.0.1:3000',
          step3: 'Client will auto-connect via WebSocket'
        },
        debug: {
          tunnelKeyExpected: tunnelKey,
          knownTunnels: Array.from(activeTunnels.keys())
        }
      });
    }

    let body = null;
    if (req.method !== 'GET' && req.method !== 'HEAD') {
      body = req.body;
    }

    const requestData = {
      method: req.method,
      url: req.url,
      headers: req.headers,
      body
    };

    console.log(`üîÑ Forwarding via WebSocket: ${req.method} ${req.url}`);

    try {
      const responsePromise = forwardRequest(tunnelKey, requestData);
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error('Gateway timeout after 30 seconds')), 30000)
      );

      const response = await Promise.race([responsePromise, timeoutPromise]);
      const duration = Date.now() - startTime;

      console.log(`‚úÖ Response received in ${duration}ms:`, {
        statusCode: response.statusCode || 200,
        headersCount: Object.keys(response.headers || {}).length,
        bodyLength: response.body ? String(response.body).length : 0
      });

      if (res.headersSent) {
        console.log('‚ö†Ô∏è Headers already sent, skipping response');
        return;
      }

      const statusCode = parseInt(response.statusCode) || 200;
      res.status(statusCode);

      if (response.headers && typeof response.headers === 'object') {
        const skipHeaders = new Set([
          'content-length',
          'transfer-encoding',
          'connection',
          'upgrade',
          'keep-alive',
          'host',
          'server',
          'x-powered-by'
        ]);

        Object.entries(response.headers).forEach(([key, value]) => {
          const lowerKey = key.toLowerCase();
          if (!skipHeaders.has(lowerKey) &&
              value !== undefined &&
              value !== null &&
              value !== '') {
            try {
              res.setHeader(key, String(value));
            } catch (headerError) {
              console.log(`‚ö†Ô∏è Skipped header ${key}: ${headerError.message}`);
            }
          }
        });
      }

      res.setHeader('X-Tunnel-Subdomain', subdomain);
      res.setHeader('X-Tunnel-Region', region);
      res.setHeader('X-Powered-By', 'Tunlify');
      res.setHeader('X-Tunnel-User', tunnel.users?.email || 'unknown');
      res.setHeader('X-Response-Time', `${duration}ms`);

      console.log(`üì§ Response body type: ${typeof response.body}`);
      console.log(`üì§ Sending response: ${statusCode}`);

      if (response.body !== undefined && response.body !== null) {
        if (typeof response.body === 'string') {
          res.setHeader('Content-Length', Buffer.byteLength(response.body, 'utf8'));
          res.send(response.body);
        } else if (Buffer.isBuffer(response.body)) {
          res.end(response.body);
        } else if (typeof response.body === 'object') {
          try {
            res.json(response.body);
          } catch {
            res.send(String(response.body));
          }
        } else {
          res.send(String(response.body));
        }
      } else {
        res.end();
      }

      console.log(`‚úÖ Response sent successfully: ${statusCode} in ${duration}ms`);

    } catch (forwardError) {
      console.error(`‚ùå Request forwarding error: ${forwardError.message}`);
      const code = forwardError.message.includes('timeout') ? 504 : 502;
      return res.status(code).json({
        message: code === 504 ? 'Gateway Timeout' : 'Bad Gateway',
        error: forwardError.message,
        tunnel: `${subdomain}.${region}.tunlify.biz.id`,
        debug: {
          error_type: forwardError.constructor.name,
          timestamp: new Date().toISOString(),
          duration: `${Date.now() - startTime}ms`
        }
      });
    }

  } catch (error) {
    console.error('‚ùå Tunnel proxy error:', error);
    console.error('‚ùå Error stack:', error.stack);

    if (!res.headersSent) {
      res.status(500).json({
        message: 'Internal server error',
        error: error.message,
        debug: {
          error_type: error.constructor.name,
          timestamp: new Date().toISOString(),
          stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        }
      });
    }
  }
});

module.exports = router;
